1. Quantos pipes serão criados após as linhas de código a seguir? Por quê?

(a)
```C
int pid;
int fd[2];
pipe(fd);
pid = fork();
```
Apenas um pipe, que é criado e compartilhado entre os procesos 

(b)
```C
int pid;
int fd[2];
pid = fork();
pipe(fd);
```
Dois pipes. Porque há dois espaços de memória e em cada um, um processo. Logo, um pipe para cada interligação entre os processos

2. Apresente mais cinco sinais importantes do ambiente Unix, além do `SIGSEGV`, `SIGUSR1`, `SIGUSR2`, `SIGALRM` e `SIGINT`. Quais são suas características e utilidades?

SIGHUP - Sinal emitido aos processos associados a um terminal quando este se "desconecta". 
SIGQUIT - Sinal emitido aos processos do terminal quando com a tecla de abandono (QUIT ou CTRL+d) do teclado são adicionadas. 
SIGILL - Emitido quando uma instrução ilegal é detectada. 
SIGBUS - Emitido em caso de violação da segmentação SIGSYS - Apresenta um argumento incorreto gerado em execução de um projeto.


3. Considere o código a seguir:

```C
#include <signal.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

void tratamento_alarme(int sig)
{
	system("date");
	alarm(1);
}

int main()
{
	signal(SIGALRM, tratamento_alarme);
	alarm(1);
	printf("Aperte CTRL+C para acabar:\n");
	while(1);
	return 0;
}
```

Sabendo que a função `alarm()` tem como entrada a quantidade de segundos para terminar a contagem, quão precisos são os alarmes criados neste código? De onde vem a imprecisão? Este é um método confiável para desenvolver aplicações em tempo real?
Devido a não otimização do código, neste código ocorrerá uma quantidade imprecisa de delay, então não é possível garantir a confiabilidade do Alarme. Em outras palavras, o disparo do alarme pode estar ou naõ adiantado com relação ao sinal, mais precisamente atrasado
